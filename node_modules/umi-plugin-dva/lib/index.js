"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _fs = require("fs");

var _path = require("path");

var _globby = _interopRequireDefault(require("globby"));

var _lodash = _interopRequireDefault(require("lodash.uniq"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(api) {
  const _api$placeholder = api.placeholder,
        RENDER = _api$placeholder.RENDER,
        ROUTER_MODIFIER = _api$placeholder.ROUTER_MODIFIER,
        IMPORT = _api$placeholder.IMPORT;
  const _api$service = api.service,
        paths = _api$service.paths,
        config = _api$service.config;
  const winPath = api.utils.winPath;
  const dvaContainerPath = (0, _path.join)(paths.absTmpDirPath, 'DvaContainer.js');
  const isProduction = process.env.NODE_ENV === 'production';
  const shouldImportDynamic = isProduction && !config.disableDynamicImport;

  function getDvaJS() {
    if ((0, _fs.existsSync)((0, _path.join)(paths.absSrcPath, 'dva.js'))) {
      return winPath((0, _path.join)(paths.absSrcPath, 'dva.js'));
    }

    if ((0, _fs.existsSync)((0, _path.join)(paths.absSrcPath, 'dva.ts'))) {
      return winPath((0, _path.join)(paths.absSrcPath, 'dva.ts'));
    }
  }

  function getModel(cwd) {
    const modelJSPath = (0, _path.join)(cwd, 'model.js');

    if ((0, _fs.existsSync)(modelJSPath)) {
      return [winPath(modelJSPath)];
    }

    const modelTSPath = (0, _path.join)(cwd, 'model.ts');

    if ((0, _fs.existsSync)(modelTSPath)) {
      return [winPath(modelTSPath)];
    }

    return _globby.default.sync(`./${config.singular ? 'model' : 'models'}/**/*.{ts,js}`, {
      cwd
    }).filter(p => !p.endsWith('.d.ts')).map(p => winPath((0, _path.join)(cwd, p)));
  }

  function endWithSlash(path) {
    return path.slice(-1) !== '/' ? `${path}/` : path;
  }

  function isPagesPath(path) {
    return winPath(endWithSlash(path)) === winPath(endWithSlash(paths.absPagesPath));
  }

  function isSrcPath(path) {
    return winPath(endWithSlash(path)) === winPath(endWithSlash(paths.absSrcPath));
  }

  function getModelsWithRoutes(routes) {
    return routes.reduce((memo, route) => {
      return [...memo, ...getPageModels((0, _path.join)(paths.cwd, route.component)), ...(route.routes ? getModelsWithRoutes(route.routes) : [])];
    }, []);
  }

  function getGlobalModels() {
    let models = getModel(paths.absSrcPath);

    if (!shouldImportDynamic) {
      // dev 模式下还需要额外载入 page 路由的 models 文件
      models = [...models, ...getModelsWithRoutes(api.service.routes)]; // 去重

      models = (0, _lodash.default)(models);
    }

    return models;
  }

  function getPageModels(cwd) {
    let models = [];

    while (!isPagesPath(cwd) && !isSrcPath(cwd) && cwd !== '/') {
      models = models.concat(getModel(cwd));
      cwd = (0, _path.dirname)(cwd);
    }

    return models;
  }

  function getGlobalModelContent() {
    return getGlobalModels().map(path => `
    app.model({ ...(require('${path}').default) });
  `.trim()).join('\r\n');
  }

  function getPluginContent() {
    const pluginPaths = _globby.default.sync('plugins/**/*.{js,ts}', {
      cwd: paths.absSrcPath
    });

    return pluginPaths.map(path => `
app.use(require('../../${path}').default);
  `.trim()).join('\r\n');
  }

  function stripFirstSlash(path) {
    if (path.charAt(0) === '/') {
      return path.slice(1);
    } else {
      return path;
    }
  }

  function chunkName(path) {
    return stripFirstSlash(winPath(path).replace(winPath(paths.cwd), '')).replace(/\//g, '__');
  }

  api.register('generateFiles', () => {
    const tpl = (0, _path.join)(__dirname, '../template/DvaContainer.js');
    let tplContent = (0, _fs.readFileSync)(tpl, 'utf-8');
    const dvaJS = getDvaJS();

    if (dvaJS) {
      tplContent = tplContent.replace('<%= ExtendDvaConfig %>', `
...((require('${dvaJS}').config || (() => ({})))()),
        `.trim()); //         .replace('<%= EnhanceApp %>', `
      // app = (require('${dvaJS}').enhance || (app => app))(app);
      //         `.trim());
    }

    tplContent = tplContent.replace('<%= ExtendDvaConfig %>', '').replace('<%= EnhanceApp %>', '').replace('<%= RegisterPlugins %>', getPluginContent()).replace('<%= RegisterModels %>', getGlobalModelContent());
    (0, _fs.writeFileSync)(dvaContainerPath, tplContent, 'utf-8');
  });
  api.register('modifyRouterFile', ({
    memo
  }) => {
    return memo.replace(IMPORT, `
import { routerRedux } from 'dva/router';
${shouldImportDynamic ? `import _dvaDynamic from 'dva/dynamic';` : ''}
${IMPORT}
      `.trim()).replace(ROUTER_MODIFIER, `
const { ConnectedRouter } = routerRedux;
Router = ConnectedRouter;
${ROUTER_MODIFIER}
      `.trim());
  });

  if (shouldImportDynamic) {
    api.register('modifyRouteComponent', ({
      memo,
      args
    }) => {
      const pageJSFile = args.pageJSFile,
            webpackChunkName = args.webpackChunkName;

      if (!webpackChunkName) {
        return memo;
      }

      let ret = `
_dvaDynamic({
  <%= MODELS %>
  component: () => import(/* webpackChunkName: '${webpackChunkName}' */'${pageJSFile}'),
})
      `.trim();
      const models = getPageModels((0, _path.join)(paths.absTmpDirPath, pageJSFile));

      if (models && models.length) {
        ret = ret.replace('<%= MODELS %>', `
app: window.g_app,
models: () => [
  ${models.map(model => `import(/* webpackChunkName: '${chunkName(model)}' */'${model}')`).join(',\r\n  ')}
],
      `.trim());
      }

      return ret.replace('<%= MODELS %>', '');
    });
  }

  api.register('modifyEntryFile', ({
    memo
  }) => {
    return memo.replace(RENDER, `
const DvaContainer = require('./DvaContainer').default;
ReactDOM.render(React.createElement(
  DvaContainer,
  null,
  React.createElement(require('./router').default)
), document.getElementById('root'));
      `.trim());
  });
  api.register('modifyAFWebpackOpts', ({
    memo
  }) => {
    memo.alias = _objectSpread({}, memo.alias, {
      dva: (0, _path.dirname)(require.resolve('dva/package')),
      'dva-loading': require.resolve('dva-loading')
    });
    return memo;
  });
  api.register('modifyPageWatchers', ({
    memo
  }) => {
    return [...memo, (0, _path.join)(paths.absSrcPath, 'models'), (0, _path.join)(paths.absSrcPath, 'plugins'), (0, _path.join)(paths.absSrcPath, 'dva.js'), (0, _path.join)(paths.absSrcPath, 'dva.ts')];
  });
}